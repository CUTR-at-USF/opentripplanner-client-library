/*
   Copyright University of South Florida 2021

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
 */

package edu.usf.cutr.otp.plan.model

import kotlinx.serialization.Polymorphic
import kotlinx.serialization.Serializable
/*
 Represents one instruction in directions, with:
 * The [distance] in meters that this step takes
 * The [relativeDirection] of this step
 * The [streetName]
 * The [absoluteDirection] of this step
 * When exiting a highway or traffic circle, the [exit] name/number
 * [stayOn] - Indicates whether or not a street changes direction at an intersection.
 * If [area] is true, this step is on an open area, such as a plaza or train platform, and thus the directions should say something like "cross"
 * If [bogusName] is true, the name of this street was generated by the system, so we should only display it once, and generally just display right/left directions
 * [lon] - The longitude of start of the step
 * [lat] - The latitude of start of the step
 * The [elevation] profile as a comma-separated list of x,y values. x is the distance from the start of the step, y is the elevation at this distance.
 */
@Serializable
data class Step
(
    val distance: Double? = null,
    val relativeDirection: String? = null,
    val streetName: String? = null,
    val absoluteDirection: String? = null,
    val stayOn: Boolean? = null,
    val area: Boolean? = null,
    val bogusName: Boolean? = null,
    val lon: Double? = null,
    val lat: Double? = null,
    val elevation: String? = null,
    val exit: String? = null,
    val alerts: List<Alert>? = null,
    val additionalProperties: Map<String,@Polymorphic Any> = HashMap()
)